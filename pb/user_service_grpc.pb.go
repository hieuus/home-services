// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: user_service.proto

package home_servicesv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	HomeServicesUserService_UserHealthz_FullMethodName = "/home_services.v1.HomeServicesUserService/UserHealthz"
)

// HomeServicesUserServiceClient is the client API for HomeServicesUserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HomeServicesUserServiceClient interface {
	UserHealthz(ctx context.Context, in *UserHealthzRequest, opts ...grpc.CallOption) (*UserHealthzResponse, error)
}

type homeServicesUserServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHomeServicesUserServiceClient(cc grpc.ClientConnInterface) HomeServicesUserServiceClient {
	return &homeServicesUserServiceClient{cc}
}

func (c *homeServicesUserServiceClient) UserHealthz(ctx context.Context, in *UserHealthzRequest, opts ...grpc.CallOption) (*UserHealthzResponse, error) {
	out := new(UserHealthzResponse)
	err := c.cc.Invoke(ctx, HomeServicesUserService_UserHealthz_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HomeServicesUserServiceServer is the server API for HomeServicesUserService service.
// All implementations should embed UnimplementedHomeServicesUserServiceServer
// for forward compatibility
type HomeServicesUserServiceServer interface {
	UserHealthz(context.Context, *UserHealthzRequest) (*UserHealthzResponse, error)
}

// UnimplementedHomeServicesUserServiceServer should be embedded to have forward compatible implementations.
type UnimplementedHomeServicesUserServiceServer struct {
}

func (UnimplementedHomeServicesUserServiceServer) UserHealthz(context.Context, *UserHealthzRequest) (*UserHealthzResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserHealthz not implemented")
}

// UnsafeHomeServicesUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HomeServicesUserServiceServer will
// result in compilation errors.
type UnsafeHomeServicesUserServiceServer interface {
	mustEmbedUnimplementedHomeServicesUserServiceServer()
}

func RegisterHomeServicesUserServiceServer(s grpc.ServiceRegistrar, srv HomeServicesUserServiceServer) {
	s.RegisterService(&HomeServicesUserService_ServiceDesc, srv)
}

func _HomeServicesUserService_UserHealthz_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserHealthzRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomeServicesUserServiceServer).UserHealthz(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HomeServicesUserService_UserHealthz_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomeServicesUserServiceServer).UserHealthz(ctx, req.(*UserHealthzRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HomeServicesUserService_ServiceDesc is the grpc.ServiceDesc for HomeServicesUserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HomeServicesUserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "home_services.v1.HomeServicesUserService",
	HandlerType: (*HomeServicesUserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserHealthz",
			Handler:    _HomeServicesUserService_UserHealthz_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user_service.proto",
}
