// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: admin_service.proto

package home_servicesv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	HomeServicesAdminService_Healthz_FullMethodName = "/home_services.v1.HomeServicesAdminService/Healthz"
)

// HomeServicesAdminServiceClient is the client API for HomeServicesAdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HomeServicesAdminServiceClient interface {
	Healthz(ctx context.Context, in *HealthzRequest, opts ...grpc.CallOption) (*HealthzResponse, error)
}

type homeServicesAdminServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHomeServicesAdminServiceClient(cc grpc.ClientConnInterface) HomeServicesAdminServiceClient {
	return &homeServicesAdminServiceClient{cc}
}

func (c *homeServicesAdminServiceClient) Healthz(ctx context.Context, in *HealthzRequest, opts ...grpc.CallOption) (*HealthzResponse, error) {
	out := new(HealthzResponse)
	err := c.cc.Invoke(ctx, HomeServicesAdminService_Healthz_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HomeServicesAdminServiceServer is the server API for HomeServicesAdminService service.
// All implementations should embed UnimplementedHomeServicesAdminServiceServer
// for forward compatibility
type HomeServicesAdminServiceServer interface {
	Healthz(context.Context, *HealthzRequest) (*HealthzResponse, error)
}

// UnimplementedHomeServicesAdminServiceServer should be embedded to have forward compatible implementations.
type UnimplementedHomeServicesAdminServiceServer struct {
}

func (UnimplementedHomeServicesAdminServiceServer) Healthz(context.Context, *HealthzRequest) (*HealthzResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Healthz not implemented")
}

// UnsafeHomeServicesAdminServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HomeServicesAdminServiceServer will
// result in compilation errors.
type UnsafeHomeServicesAdminServiceServer interface {
	mustEmbedUnimplementedHomeServicesAdminServiceServer()
}

func RegisterHomeServicesAdminServiceServer(s grpc.ServiceRegistrar, srv HomeServicesAdminServiceServer) {
	s.RegisterService(&HomeServicesAdminService_ServiceDesc, srv)
}

func _HomeServicesAdminService_Healthz_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthzRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomeServicesAdminServiceServer).Healthz(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HomeServicesAdminService_Healthz_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomeServicesAdminServiceServer).Healthz(ctx, req.(*HealthzRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HomeServicesAdminService_ServiceDesc is the grpc.ServiceDesc for HomeServicesAdminService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HomeServicesAdminService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "home_services.v1.HomeServicesAdminService",
	HandlerType: (*HomeServicesAdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Healthz",
			Handler:    _HomeServicesAdminService_Healthz_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "admin_service.proto",
}
